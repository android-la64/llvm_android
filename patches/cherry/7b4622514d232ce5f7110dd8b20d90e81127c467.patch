From 2319e588ab063c4ff195ff28f6a4eeb41147902b Mon Sep 17 00:00:00 2001
From: Ryan Prichard <rprichard@google.com>
Date: Mon, 12 Feb 2024 13:53:03 -0800
Subject: [PATCH] [libc++] Fix incorrect macro push/pop in unwrap_iter.h

Partial cherry-pick of https://github.com/llvm/llvm-project/pull/79204.

Include three parts of that pull request:
 - New static assertions in test/libcxx/system_reserved_names.gen.py.
 - The fix to unwrap_iter.h.
 - Fixes to the _LIBCPP_PUSH_MACROS and _LIBCPP_POP_MACROS to spell the
   three curses.h macros correctly, e.g. "refresh" not "refresh()".

The unwrap_iter.h bug was added along with the three curses.h macros in
D147356.

Before adding the new static assertions, the libc++ test didn't verify
that the macros were still defined after including a libc++ header.
Because the 3 new curses.h macros were misspelled in the _Pragma,
including many libc++ headers would outright undefine the curses macros
(via __undef_macros). Without the fix to unwrap_iter.h, including many
libc++ headers would leave all the push/pop'd macros undefined.

With the cherry-picked fixes, the system_reserved_names.gen.py test
now verifies that the push/pop guards are correct, and there are more
guards needed to get `move` and `erase` working. To keep this patch
small, omit those guards and disable that part of the test. We haven't
tried to protect libc++ from those 2 macros before D147356, and it
appears that libncurses already tries to undefine all 3 of the macros
that libc++ is guarding against (i.e. `refresh`, `move`, and `erase`)
in curses.tail.

Change-Id: I1c0d323771e451f8fd9c6b1dd7145aba9beb5371
---
 libcxx/include/__algorithm/unwrap_iter.h        | 2 +-
 libcxx/include/__config                         | 4 ++--
 libcxx/test/libcxx/system_reserved_names.gen.py | 9 +++++++--
 3 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/libcxx/include/__algorithm/unwrap_iter.h b/libcxx/include/__algorithm/unwrap_iter.h
index 91346e3c1bd2..6345d7ae91cd 100644
--- a/libcxx/include/__algorithm/unwrap_iter.h
+++ b/libcxx/include/__algorithm/unwrap_iter.h
@@ -80,6 +80,6 @@ _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _OrigIter __rewrap_iter(_OrigIter __orig
 
 _LIBCPP_END_NAMESPACE_STD
 
-_LIBCPP_PUSH_MACROS
+_LIBCPP_POP_MACROS
 
 #endif // _LIBCPP___ALGORITHM_UNWRAP_ITER_H
diff --git a/libcxx/include/__config b/libcxx/include/__config
index b503e1d01b10..ded5e19a0009 100644
--- a/libcxx/include/__config
+++ b/libcxx/include/__config
@@ -1285,8 +1285,8 @@ __sanitizer_verify_double_ended_contiguous_container(const void*, const void*, c
 #  endif // _LIBCPP_ENABLE_CXX20_REMOVED_FEATURES
 
 // clang-format off
-#  define _LIBCPP_PUSH_MACROS _Pragma("push_macro(\"min\")") _Pragma("push_macro(\"max\")") _Pragma("push_macro(\"refresh()\")") _Pragma("push_macro(\"move(int, int)\")") _Pragma("push_macro(\"erase()\")")
-#  define _LIBCPP_POP_MACROS _Pragma("pop_macro(\"min\")") _Pragma("pop_macro(\"max\")") _Pragma("pop_macro(\"refresh()\")") _Pragma("pop_macro(\"move(int, int)\")") _Pragma("pop_macro(\"erase()\")")
+#  define _LIBCPP_PUSH_MACROS _Pragma("push_macro(\"min\")") _Pragma("push_macro(\"max\")") _Pragma("push_macro(\"refresh\")") _Pragma("push_macro(\"move\")") _Pragma("push_macro(\"erase\")")
+#  define _LIBCPP_POP_MACROS _Pragma("pop_macro(\"min\")") _Pragma("pop_macro(\"max\")") _Pragma("pop_macro(\"refresh\")") _Pragma("pop_macro(\"move\")") _Pragma("pop_macro(\"erase\")")
 // clang-format on
 
 #  ifndef _LIBCPP_NO_AUTO_LINK
diff --git a/libcxx/test/libcxx/system_reserved_names.gen.py b/libcxx/test/libcxx/system_reserved_names.gen.py
index e2aa8fc47348..55d2106df980 100644
--- a/libcxx/test/libcxx/system_reserved_names.gen.py
+++ b/libcxx/test/libcxx/system_reserved_names.gen.py
@@ -150,9 +150,14 @@ for header in public_headers:
 #define max SYSTEM_RESERVED_NAME
 
 // Test to make sure curses has no conflicting macros with the standard library
-#define move SYSTEM_RESERVED_NAME
-#define erase SYSTEM_RESERVED_NAME
 #define refresh SYSTEM_RESERVED_NAME
 
 #include <{header}>
+
+// Make sure we don't swallow the definition of the macros we push/pop
+#define STRINGIFY_IMPL(x) #x
+#define STRINGIFY(x) STRINGIFY_IMPL(x)
+static_assert(__builtin_strcmp(STRINGIFY(min), STRINGIFY(SYSTEM_RESERVED_NAME)) == 0, "");
+static_assert(__builtin_strcmp(STRINGIFY(max), STRINGIFY(SYSTEM_RESERVED_NAME)) == 0, "");
+static_assert(__builtin_strcmp(STRINGIFY(refresh), STRINGIFY(SYSTEM_RESERVED_NAME)) == 0, "");
 """)
-- 
2.43.0.687.g38aa6559b0-goog

